add_cleaned_addresses()
# Identify incorrect service year - remove from data
incorrect_inservicedate <- KC %>% filter(KC$in_service_date > KC_vintage_year)
KC %<>% filter(KC$in_service_date <= KC_vintage_year | is.na(KC$in_service_date))
# Identify duplicate working_id or kc_id value
duplicates <- KC_cleaned[!is.na(KC_cleaned$kc_id) & KC_cleaned$kc_id != "", ]
duplicates <- duplicates[duplicated(duplicates$kc_id) | duplicated(duplicates$kc_id, fromLast = TRUE), ]
duplicates <- KC_cleaned[!is.na(KC_cleaned$working_id) & KC_cleaned$working_id != "", ]
duplicates <- duplicates[duplicated(duplicates$working_id) | duplicated(duplicates$working_id, fromLast = TRUE), ]
## Identify properties with expired contracts and those that resigned --------------------------
ended_contract <- KC_cleaned %>% filter(contractexpired_flag == "1")
signed_new_contract <- KC_cleaned %>%
filter(
(duplicated(project_name) | duplicated(project_name, fromLast = TRUE)) &
project_name %in% ended_contract$project_name
)
# For properties that re-signed, update data
signed_new_contract %<>%
group_by(project_name) %>%
fill(working_id, .direction = "downup") %>%
ungroup()
KC_cleaned <- KC_cleaned %>% # Remove any kc_id that appears in signed_new_contract
filter(!(kc_id %in% signed_new_contract$kc_id)) %>% # Add back the replacements where contractexpired_flag == 0
bind_rows(signed_new_contract %>%
filter(contractexpired_flag == 0) %>%
mutate(contractnew_flag = 1)
)
View(KC_cleaned)
## Clean up --------------------------
rm(KC_raw, KC, KC_path, KC_vintage_year, incorrect_inservicedate, duplicates, ended_contract, signed_new_contract)
library(readxl)
library(janitor)
library(data.table)
library(dplyr)
library(magrittr)
vintage_year <- 2023
setwd("C:/Users/eclute/GitHub/irhd")
bha_raw <- "J:/Projects/IncomeRestrictedHsgDB/2023 vintage/Review Files Recieved/IRHD_review_kitsap_bremertonhousingauthority.xlsx"
hasco_raw <- "J:/Projects/IncomeRestrictedHsgDB/2023 vintage/Review Files Recieved/IRHD_review_snohomish.xlsx"
# Pull in data
bha <- read_excel(bha_raw, sheet = 3)
hasco <- read_excel(hasco_raw, sheet = 3)
View(bha)
View(hasco)
View(bha)
bha %<>% mutate(in_service_date = na_if(in_service_date, "Not Applicable")) %>%
filter(`Reviewer Comments` != 'New Property' | reported_address != '4860 Driftwood Street') %>% # Removed, appears to be a duplicate of existing WSHFC record
filter(`Reviewer Comments` != 'New Property' | reported_address != '265 Oyster Bay Ave') # Removed, appears to be a duplicate of existing WSHFC record
hasco$homeless <- as.character(hasco$homeless)
# Clean data
bha %<>% mutate(in_service_date = na_if(in_service_date, "Not Applicable")) %>%
filter(`Reviewer Comments` != 'New Property' | reported_address != '4860 Driftwood Street') %>% # Removed, appears to be a duplicate of existing WSHFC record
filter(`Reviewer Comments` != 'New Property' | reported_address != '265 Oyster Bay Ave') %>% # Removed, appears to be a duplicate of existing WSHFC record
select(-c(farmworker))
library(readxl)
library(janitor)
library(data.table)
library(dplyr)
library(magrittr)
vintage_year <- 2023
setwd("C:/Users/eclute/GitHub/irhd")
bha_raw <- "J:/Projects/IncomeRestrictedHsgDB/2023 vintage/Review Files Recieved/IRHD_review_kitsap_bremertonhousingauthority.xlsx"
hasco_raw <- "J:/Projects/IncomeRestrictedHsgDB/2023 vintage/Review Files Recieved/IRHD_review_snohomish.xlsx"
# Pull in data
bha <- read_excel(bha_raw, sheet = 3)
hasco <- read_excel(hasco_raw, sheet = 3)
## Clean data ----------------------
# BHA data
bha %<>% mutate(in_service_date = na_if(in_service_date, "Not Applicable")) %>%
filter(`Reviewer Comments` != 'New Property' | reported_address != '4860 Driftwood Street') %>% # Removed, appears to be a duplicate of existing WSHFC record
filter(`Reviewer Comments` != 'New Property' | reported_address != '265 Oyster Bay Ave') # Removed, appears to be a duplicate of existing WSHFC record
# HASCO data
hasco$homeless <- as.character(hasco$homeless)
#hasco %<>% select(-c(dup_key, general_notes, farmworker))
cols_bha <- colnames(bha)
cols_hasco <- colnames(hasco)
# Matching column names
matching_cols <- intersect(cols_bha, cols_hasco)
# Columns in df1 but not df2
unique_bha <- setdiff(cols_bha, cols_hasco)
# Columns in df2 but not df1
unique_hasco <- setdiff(cols_hasco, cols_bha)
list(
matching = matching_cols,
only_in_bha = unique_bha,
only_in_hasco = unique_hasco
)
bha %<>% select(-c(irhd_property_id))
hasco %<>% select(-c(dup_key, general_notes, farmworker))
# Join tables
updates_received <- bind_rows(bha,hasco)
View(updates_received)
updates_received %<>% mutate(full_address = str_replace(full_address, ",\\s*(?=\\d{5}$)", " ")) # Remove extra comma before zip code
library(stringr)
updates_received %<>% mutate(full_address = str_replace(full_address, ",\\s*(?=\\d{5}$)", " ")) # Remove extra comma before zip code
View(updates_received)
## Final Cleaning ----------------------
#Search and remove properties in the wrong vintage year
incorrect_inservicedate <- updates_received %>% filter(updates_received$in_service_date > vintage_year)
View(incorrect_inservicedate)
updates_received %<>% filter(updates_received$in_service_date <= vintage_year | is.na(updates_received$in_service_date))
# Clean script
rm(bha, incorrect_inservicedate,bha_raw,vintage_year,hasco_raw,hasco)
# Clean script
rm(bha, incorrect_inservicedate,bha_raw,vintage_year,hasco_raw,hasco, cols_bha, cols_hasco, matching_cols, unique_bha, unique_hasco)
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
table_id <- Id(schema = "stg", table = "irhd")
sql_bing_maps_key <- Sys.getenv("BING_MAPS_KEY")
sql_import <- paste('irhd.properties')
sql_export <- paste0('exec irhd.merge_irhd_properties ', vintage_year, ",'", sql_bing_maps_key, "'")
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) # import last vintage of IRHD from Elmer
source(wshfc_clean_script) # cleaned WSHFC data
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) # import last vintage of IRHD from Elmer
source(wshfc_clean_script) # cleaned WSHFC data
source(kc_clean_script) # cleaned KC data
source(updates_received_script) #cleaned data from providers
View(IRHD_raw)
## b) Final tweaks to incoming data
IRHD_raw <- IRHD_raw %>% filter(data_year == last_vintage)
View(IRHD_raw)
IRHD_raw <- IRHD_raw %>% filter(data_year == last_vintage)
IRHD <- IRHD_raw %>% filter(!(county == "King")) %>% # King county handled separately
select(-c(created_at,updated_at,shape,irhd_property_id)) %>% # Remove unneeded fields
mutate(full_address = str_replace(full_address, ",\\s*(?=\\d{5}$)", " ")) # Remove extra comma before zip code
View(IRHD)
## STEP 2: Load current IRHD and new data from providers (WSHFC, KC, & Others) -------------------------
## a) load data
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) %>% # import last vintage of IRHD from Elmer
filter(!(county == "King")) %>% # King county handled separately
select(-c(created_at,updated_at,shape,irhd_property_id)) %>% # Remove unneeded fields
mutate(full_address = str_replace(full_address, ",\\s*(?=\\d{5}$)", " ")) # Remove extra comma
IRHD <- IRHD_raw %>% filter(data_year == last_vintage)
# TITLE: Reconcile IRHD and new data
# GEOGRAPHIES: King, Snohomish, Pierce, Kitsap
# DATA SOURCE: King County, WSHFC, HASCO, THA, EHA, PCHA, BHA, HK
# DATE CREATED: 05.01.2025
# AUTHOR: Eric Clute
## INSTRUCTIONS
## STEP 1: Set Assumptions, connect to Elmer
## STEP 2: Load current IRHD and new data from providers (WSHFC, KC, & Others)
## STEP 3: Identify changes to WSHFC data compared to last vintage of IRHD (select which datapoints to go with)
## STEP 4: Send prelim IRHD to data providers for review
## STEP 5: Incorporate any changes from data providers
## STEP 6: Final clean up and push to Elmer
## STEP 1: Assumptions -------------------------
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
table_id <- Id(schema = "stg", table = "irhd")
sql_bing_maps_key <- Sys.getenv("BING_MAPS_KEY")
sql_import <- paste('irhd.properties')
sql_export <- paste0('exec irhd.merge_irhd_properties ', vintage_year, ",'", sql_bing_maps_key, "'")
## STEP 2: Load current IRHD and new data from providers (WSHFC, KC, & Others) -------------------------
## a) load data
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) %>% # import last vintage of IRHD from Elmer
source(wshfc_clean_script) # cleaned WSHFC data
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
table_id <- Id(schema = "stg", table = "irhd")
sql_bing_maps_key <- Sys.getenv("BING_MAPS_KEY")
sql_import <- paste('irhd.properties')
sql_export <- paste0('exec irhd.merge_irhd_properties ', vintage_year, ",'", sql_bing_maps_key, "'")
## STEP 2: Load current IRHD and new data from providers (WSHFC, KC, & Others) -------------------------
## a) load data
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) %>% # import last vintage of IRHD from Elmer
source(wshfc_clean_script) # cleaned WSHFC data
## STEP 2: Load current IRHD and new data from providers (WSHFC, KC, & Others) -------------------------
## a) load data
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) %>% # import last vintage of IRHD from Elmer
source(wshfc_clean_script) # cleaned WSHFC data
## STEP 2: Load current IRHD and new data from providers (WSHFC, KC, & Others) -------------------------
## a) load data
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import)) # import last vintage of IRHD from Elmer
source(wshfc_clean_script) # cleaned WSHFC data
source(kc_clean_script) # cleaned KC data
source(updates_received_script) #cleaned data from providers
## b) Final tweaks to incoming data
IRHD <- IRHD_raw %>% filter(data_year == last_vintage) %>%
filter(!(county == "King")) %>% # King county handled separately
select(-c(created_at,updated_at,shape,irhd_property_id)) %>% # Remove unneeded fields
mutate(full_address = str_replace(full_address, ",\\s*(?=\\d{5}$)", " ")) # Remove extra commas
new_wshfc <- anti_join(WSHFC_cleaned, IRHD, by = "property_id")
View(new_wshfc)
no_match_irhd <- anti_join(IRHD, WSHFC_cleaned, by = "property_id")
View(no_match_irhd)
no_match_irhd <- no_match_irhd %>% drop_na(property_id)
View(no_match_irhd)
no_match_irhd <- anti_join(IRHD, WSHFC_cleaned, by = "property_id") %>%
drop_na(property_id)
View(no_match_irhd)
write.csv(no_match_irhd, review_after_join_wshfc, row.names=FALSE)
rectify <- identify_changes_irhd(IRHD, WSHFC_cleaned, 'property_id')
View(rectify)
subset1 <- rectify %>% subset((is.na(variable_value.x)| variable_value.x == ""), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset1$select <- subset1$variable_value.y
rectify <- anti_join(rectify, subset1, by=c("ID"="ID")) # remove from rectify
updates <- subset1
rm(subset1)
View(updates)
subset2 <- rectify %>% subset((variable_class == "in_service_date" |
variable_class == "manager"| variable_class == "property_owner"|
variable_class == "project_id"| variable_class == "disabled"|
variable_class == "homeless"| variable_class == "senior"|
variable_class == "bed_count"| variable_class == "property_name"|
variable_class == "site_type"| variable_class == "funding_sources"|
variable_class == "HOMEcity"| variable_class == "HOMEcounty"| variable_class == "HOMEstate"|
variable_class == "expiration_date"| variable_class == "large_household"|
variable_class == "project_name"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset2$select <- subset2$variable_value.y
rectify <- anti_join(rectify, subset2, by=c("ID"="ID")) # remove from rectify
updates <- rbind(updates, subset2)
rm(subset2)
subset3 <- rectify %>% subset(str_detect(rectify$variable_value.y, str_c("Mu")), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset3$select <- subset3$variable_value.x
rectify <- anti_join(rectify, subset3, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset3)
rm(subset3)
View(rectify)
subset4 <- rectify %>% subset((variable_class == "total_units" | variable_class == "total_restricted_units"|
variable_class == "ami_20"| variable_class == "ami_25"|
variable_class == "ami_30"| variable_class == "ami_35"|
variable_class == "ami_40"| variable_class == "ami_45"|
variable_class == "ami_50"|
variable_class == "ami_60"| variable_class == "ami_65"|
variable_class == "ami_70"| variable_class == "ami_75"|
variable_class == "ami_80"| variable_class == "ami_85"|
variable_class == "ami_90"| variable_class == "ami_100"| variable_class == "ami_120"|
variable_class == "market_rate"| variable_class == "manager_unit"|
variable_class == "bedroom_0"| variable_class == "bedroom_1"| variable_class == "bedroom_2"| variable_class == "bedroom_3"|
variable_class == "bedroom_4"| variable_class == "bedroom_5"| variable_class == "bedroom_unknown"|
variable_class == "bed_count"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset4_sum <- subset4 %>% group_by(property_id) %>%
summarize(sum.x=sum(as.numeric(variable_value.x)),
sum.y=sum(as.numeric(variable_value.y)))
subset4_sum$diff <- abs((subset4_sum$sum.x-subset4_sum$sum.y)/subset4_sum$sum.x)
# join back to subset4 table, so each row of data now has the percentage difference
subset4 <- merge(subset4, subset4_sum, by = "property_id")
rm(subset4_sum)
View(subset4)
# Rows with "diff" of 12% or less will be selected - we want the WSHFC data
subset4$select <- ifelse(subset4$diff <= "0.12", subset4$variable_value.y, "")
# Rows with "diff" of 12% or less will be selected - we want the WSHFC data
subset4$select <- ifelse(subset4$diff <= "0.125", subset4$variable_value.y, "")
# Rows where the sum.y is 0, we keep the sum.x data (if WSHFC data is 0, we keep IRHD data)
subset4$select <- ifelse(subset4$sum.y == "0", subset4$variable_value.x, subset4$select)
subset4 <- subset4 %>% subset(!(select == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select, sum.x, sum.y, diff))
rectify <- anti_join(rectify, subset4, by=c("ID"="ID")) # remove from rectify
subset4 <- subset4[, -c(8,9,10)]
updates <- rbind(updates, subset4)
rm(subset4)
View(rectify)
subset5 <- rectify %>% subset((is.na(variable_value.y)| variable_value.y == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset5$select <- subset5$variable_value.x
rectify <- anti_join(rectify, subset5, by=c("ID"="ID")) # remove from rectify
updates <- rbind(updates, subset5)
rm(subset5)
subset6 <- rectify %>% subset(str_detect(rectify$variable_value.y, str_c("303 Howell Way & 417 3rd Ave, Edmonds, WA 98020")),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset6$select <- subset6$variable_value.x
rectify <- anti_join(rectify, subset6, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset6)
rm(subset6)
subset7 <- rectify %>% subset(str_detect(rectify$variable_value.y, " Rainier Ave, Everett, WA 98201"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset7$select <- subset7$variable_value.x
rectify <- anti_join(rectify, subset7, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset7)
rm(subset7)
subset8 <- rectify %>% subset(str_starts(rectify$variable_value.y, ("[:alpha:]")),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset8$select <- subset8$variable_value.x
rectify <- anti_join(rectify, subset8, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset8)
rm(subset8)
subset9 <- rectify %>% subset(str_detect(rectify$property_id, "18015|18016|16100|16101|16402|16002|18092|16002|17394|16408|17832|16445|16964|18086|17951|18181|16269|16794|18320|16707|18422|18379|18436"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset9$select <- subset9$variable_value.x
rectify <- anti_join(rectify, subset9, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset9)
rm(subset9)
subset10 <- rectify %>% subset(str_detect(rectify$property_id, "18210|16044|16774|16725|16158|16905|17438"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset10$select <- subset10$variable_value.y
rectify <- anti_join(rectify, subset10, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset10)
rm(subset10)
subset11 <- rectify %>% subset(str_detect(rectify$property_id, "15905|15932|15961|16024|16593|17818|17820|17821|18107|18108|18109|18110|17749|17748"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset11$select <- subset11$variable_value.x
rectify <- anti_join(rectify, subset11, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset11)
rm(subset11)
subset14 <- rectify %>% subset((rectify$select == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset14$select <- subset14$variable_value.y
rectify <- anti_join(rectify, subset14, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset14)
rm(subset14)
IRHD_clean <- update_irhd(IRHD, updates, 'property_id')
View(IRHD_clean)
View(new_wshfc)
View(updates_received)
# Add in new properties identified in new_wshfc as well as all cleaned KC data
IRHD_clean <- rbind(IRHD_clean, new_wshfc, KC_cleaned, fill=TRUE)
View(IRHD_clean)
View(IRHD_raw)
# Clean up before export to housing authorities
IRHD_clean <- ami_cleanup(IRHD_clean)
IRHD_clean <- unitsize_cleanup(IRHD_clean)
IRHD_clean <- datayear_cleanup(IRHD_clean)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
IRHD_clean <- datayear_cleanup(IRHD_clean)
IRHD_clean <- create_workingid(IRHD_clean)
## STEP 5: Incorporate any changes from data providers -------------------------
# a) Add new properties, remove out-of-service, update records as needed
new <- updates_received %>% filter(`Reviewer Comments` == "New Property") %>% select(-`Reviewer Comments`)
View(new)
remove <- updates_received %>% filter(`Reviewer Comments` == "remove") %>% select(-`Reviewer Comments`)
View(remove)
IRHD_clean <- rbind(IRHD_clean, new, fill = TRUE)
IRHD_clean <- anti_join(IRHD_clean, remove, by=c("working_id" = "working_id"))
rectify <- identify_changes_irhd(IRHD_clean, updates_received, 'working_id')
View(IRHD_clean)
subset15 <- rectify %>% filter(rectify$select == "")
subset15$select <- subset15$variable_value.y
rectify <- anti_join(rectify, subset15, by=c("ID"="ID"))# remove from rectify
updates <- subset15
rm(subset15)
View(updates)
IRHD_clean <- update_irhd(IRHD_clean, updates, 'working_id')
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
## STEP 1: Assumptions -------------------------
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
## STEP 1: Assumptions -------------------------
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
## STEP 1: Assumptions -------------------------
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2023_WSHFC_data.R"
kc_clean_script <- "./clean_2023_KC_data.R"
updates_received_script <- "./clean_2023_provider_data.R"
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2023
last_vintage <- vintage_year - 1
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "SQLserver",
database = "Elmer",
trusted_connection = "yes")
