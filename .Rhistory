# Calculate percentage POC by region/county, crunch new MOE
poc <- B03002 %>%
group_by(name, poc) %>%
summarise(estimate=sum(estimate),
moe=moe_sum(estimate=estimate, moe=moe, na.rm = TRUE)) %>%
filter(!poc == "")
poc <- poc %>%
pivot_wider(names_from = poc, values_from = c(estimate,moe)) %>%
mutate(prct=((estimate_poc/estimate_Total))) %>%
rowwise() %>%
mutate(moe_new_total=moe_sum(estimate = estimate_poc,
moe = moe_poc)) %>%
mutate(moe_perc_poc=moe_prop(num=estimate_poc,
denom=estimate_Total, moe_num=moe_poc, moe_denom=moe_new_total))
poc <- reliability_calcs(poc, estimate='prct',
moe='moe_perc_poc')
head(poc %>% select(name, moe_perc_poc, reliability))
# Pivot
poc_pivot <- poc %>%
select(estimate_poc, prct, moe_poc, reliability)
poc_pivot <- pivot_wider(poc_pivot, names_from = name, values_from = c(estimate_poc, prct, moe_poc, reliability))
# Clean columns
poc_pivot$race = "poc"
poc_pivot <- poc_pivot %>% select(race, everything())
names(poc_pivot) = gsub(pattern = "_poc", replacement = "", x = names(poc_pivot))
names(poc_pivot) = gsub(pattern = "reliability", replacement = "rr", x = names(poc_pivot))
# Join to Table01
table01 <- rbind(poc_pivot, table01)
table01 <- table01[c(which(table01$race != "poc"), which(table01$race == "poc")), ]
# Rounded estimates
columns_to_round <- grep("^estimate_", names(table01), value = TRUE) # Columns to be rounded
table01[columns_to_round] <- lapply(table01[columns_to_round], function(x) round(x, -2)) # Round to nearest 100
columns_to_round <- grep("^moe_", names(table01), value = TRUE) # Columns to be rounded
table01[columns_to_round] <- lapply(table01[columns_to_round], function(x) round(x, 0)) # Round to nearest 1
columns_to_truncate <- grep("^prct_", names(table01), value = TRUE) # Columns to be truncated
table01[columns_to_truncate] <- lapply(table01[columns_to_truncate], function(x) trunc(x * 1000) / 1000) # Truncate to 3 decimals
View(poc_pivot)
View(table01)
table01$race <- gsub("poc", "People of Color", table01$race)
View(table01)
columns_to_round <- grep("^estimate_", names(table01), value = TRUE) # Columns to be rounded
table01[columns_to_round] <- lapply(table01[columns_to_round], function(x) round(x, -2)) # Round to nearest 100
columns_to_round <- grep("^moe_", names(table01), value = TRUE) # Columns to be rounded
table01[columns_to_round] <- lapply(table01[columns_to_round], function(x) round(x, 0)) # Round to nearest 1
columns_to_truncate <- grep("^prct_", names(table01), value = TRUE) # Columns to be truncated
table01[columns_to_truncate] <- lapply(table01[columns_to_truncate], function(x) trunc(x * 1000) / 1000) # Truncate to 3 decimals
# Export
file_name_formatted <- paste(formatted_export, collapse = "_")
file_name_formatted <- paste(file_name_formatted, ".csv", sep = "")
write.csv(table01, file = file.path(export_path, file_name_formatted), row.names = FALSE)
columns_to_round <- grep("^estimate_", names(table01), value = TRUE) # Columns to be rounded
table01[columns_to_round] <- lapply(table01[columns_to_round], function(x) round(x, -2)) # Round to nearest 100
columns_to_round <- grep("^moe_", names(table01), value = TRUE) # Columns to be rounded
table01[columns_to_round] <- lapply(table01[columns_to_round], function(x) round(x, 0)) # Round to nearest 1
columns_to_truncate <- grep("^prct_", names(table01), value = TRUE) # Columns to be truncated
table01[columns_to_truncate] <- lapply(table01[columns_to_truncate], function(x) trunc(x * 1000) / 1000) # Truncate to 3 decimals
# Export
file_name_formatted <- paste(formatted_export, collapse = "_")
file_name_formatted <- paste(file_name_formatted, ".csv", sep = "")
write.csv(table01, file = file.path(export_path, file_name_formatted), row.names = FALSE)
library(psrccensus)
library(tidycensus)
library(tidyverse)
library(dplyr)
year <- (2022)
acs_type <- "1"
raw_export <- c("raw", year, "acs_pums", acs_type)
formatted_export <- c("formatted", year, "acs_pums", acs_type)
export_path <- "Y:/Demog Profile/2024/Data/04-median-hh-income-race"
table_order <- c("race",
"estimate_Region","moe_Region",
"estimate_King", "moe_King",
"estimate_Kitsap", "moe_Kitsap",
"estimate_Pierce", "moe_Pierce",
"estimate_Snohomish", "moe_Snohomish",
"rr_Region", "rr_King","rr_Kitsap","rr_Pierce", "rr_Snohomish")
re_order <- c("American Indian and Alaska Native", "Asian", "Black", "Hispanic or Latinx",
"Native Hawaiian and Other Pacific Islander","White", "Some Other Race", "Two or more races", "Total")
# Pull Data
pums_raw <- get_psrc_pums(acs_type,year,"h",c("PRACE","HINCP"))
# Summarize by race/ethnicity - county
pums <- pums_raw %>%
mutate(race = case_when(grepl("White alone", PRACE) ~ "White",
grepl("Black or African American alone", PRACE) ~ "Black",
grepl("American Indian or Alaskan Native Alone", PRACE) ~ "American Indian and Alaska Native",
grepl("Asian alone", PRACE) ~ "Asian",
grepl("Native Hawaiian and Other Pacific Islander alone", PRACE) ~ "Native Hawaiian and Other Pacific Islander",
grepl("Some Other Race alone", PRACE) ~ "Some Other Race",
grepl("Two or More Races", PRACE) ~ "Two or more races",
grepl("Hispanic or Latino", PRACE) ~ "Hispanic or Latinx",
!is.na(PRACE) ~ ""),
poc = case_when(grepl("Black", race) ~ "poc",
grepl("American Indian and Alaska Native", race) ~ "poc",
grepl("Asian", race) ~ "poc",
grepl("Native Hawaiian and Other Pacific Islander", race) ~ "poc",
grepl("Some Other Race", race) ~ "poc",
grepl("Two or more races", race) ~ "poc",
grepl("Hispanic or Latinx", race) ~ "poc",
!is.na(race) ~ "")) %>%
filter(!race == "")
incbyre <- psrc_pums_median(pums, "HINCP", group_vars = c("COUNTY", "race"),rr=TRUE)
names(incbyre)[names(incbyre) == 'COUNTY'] <- 'name'
incbyre <- incbyre %>% filter(!name == "Region")
# Summarize by race/ethnicity - region & join to county data
incbyre_region <- psrc_pums_median(pums, "HINCP", group_vars = c("race"),rr=TRUE)
names(incbyre_region)[names(incbyre_region) == 'COUNTY'] <- 'name'
incbyre <- rbind(incbyre, incbyre_region)
rm(incbyre_region)
# Group by County & R/E, order
table04 <- incbyre %>%
group_by(name,race) %>%
reframe(estimate = HINCP_median,
moe = HINCP_median_moe,
rr = reliability) %>%
pivot_wider(names_from = name, values_from = estimate|moe|rr) %>%
select(all_of(table_order)) %>%
slice(match(re_order, race))
# Calculate percentages
# Reference table
table04_prct <- table04 %>%
subset(race == "Total") %>%
select(starts_with("estimate"))
# Crunch Percentages for all R/E categories. Regionwide and by county
table04$prct_Region = table04$estimate_Region/table04_prct$estimate_Region
table04$prct_King = table04$estimate_King/table04_prct$estimate_King
table04$prct_Kitsap = table04$estimate_Kitsap/table04_prct$estimate_Kitsap
table04$prct_Pierce = table04$estimate_Pierce/table04_prct$estimate_Pierce
table04$prct_Snohomish = table04$estimate_Snohomish/table04_prct$estimate_Snohomish
# Calculate percentage POC by region/county, crunch new MOE
poc_raw <- pums %>% filter(!poc == "")
incpoc <- psrc_pums_median(poc_raw, "HINCP", group_vars = c("COUNTY"),rr=TRUE)
names(incpoc)[names(incpoc) == 'COUNTY'] <- 'name'
poc_pivot <- incpoc %>%
group_by(name) %>%
reframe(estimate = HINCP_median,
moe = HINCP_median_moe,
rr = reliability) %>%
pivot_wider(names_from = name, values_from = estimate|moe|rr)
# Clean columns
poc_pivot$race = "poc"
poc_pivot <- poc_pivot %>% select(race, everything())
# Crunch Percentages for POC. Regionwide and by county
poc_pivot$prct_Region = poc_pivot$estimate_Region/table04_prct$estimate_Region
poc_pivot$prct_King = poc_pivot$estimate_King/table04_prct$estimate_King
poc_pivot$prct_Kitsap = poc_pivot$estimate_Kitsap/table04_prct$estimate_Kitsap
poc_pivot$prct_Pierce = poc_pivot$estimate_Pierce/table04_prct$estimate_Pierce
poc_pivot$prct_Snohomish = poc_pivot$estimate_Snohomish/table04_prct$estimate_Snohomish
# Join to table04
table04 <- rbind(poc_pivot, table04)
table04 <- table04[c(which(table04$race != "poc"), which(table04$race == "poc")), ]
# Rounded estimates
columns_to_round <- grep("^estimate_", names(table04), value = TRUE) # Columns to be rounded
table04[columns_to_round] <- lapply(table04[columns_to_round], function(x) round(x, -2)) # Round to nearest 100
columns_to_round <- grep("^moe_", names(table04), value = TRUE) # Columns to be rounded
table04[columns_to_round] <- lapply(table04[columns_to_round], function(x) round(x, 0)) # Round to nearest 1
columns_to_truncate <- grep("^prct_", names(table04), value = TRUE) # Columns to be truncated
table04[columns_to_truncate] <- lapply(table04[columns_to_truncate], function(x) trunc(x * 1000) / 1000) # Truncate to 3 decimals
View(table04)
file_name_formatted <- paste(formatted_export, collapse = "_")
file_name_formatted <- paste(file_name_formatted, ".csv", sep = "")
write.csv(table04, file = file.path(export_path, file_name_formatted), row.names = FALSE)
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
setwd("C:/Users/eclute/GitHub/irhd")
remotes::install_github("slu-openGIS/postmastr")
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "AWS-PROD-SQL\\Sockeye",
database = "Elmer",
trusted_connection = "yes")
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
address_func <- "./address_match.R"
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2022_WSHFC_data.R"
kc_clean_script <- "./clean_2022_KC_data.R"
updates_received_script <- "./clean_2022_provider_data.R"
source(address_func)
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2022
last_vintage <- vintage_year - 1
sql_import <- paste('irhd.properties')
sql_export <- paste('exec irhd.merge_irhd_properties', vintage_year)
## 1) load data -------------------------
# load all IRHD records from Elmer
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import))
# load cleaned WSHFC data
source(wshfc_clean_script)
# load cleaned data from data partners
#source(kc_clean_script)
source(updates_received_script)
## 2) Final tweaks -------------------------
IRHD_raw <- IRHD_raw %>% filter(data_year == last_vintage)
IRHD <- IRHD_raw %>% filter(!(county == "King")) # King county handled separately
IRHD %<>% select(-c(created_at,updated_at,sro,shape,irhd_property_id)) # Remove unneeded fields
## 3) Locate records in WSHFC not in IRHD (likely new records/properties) -------------------------
new_wshfc <- anti_join(WSHFC_cleaned, IRHD, by = "property_id")
## 4) Locate records in IRHD not in WSHFC_cleaned (No longer in WSHFC data. Will need to be verified (did they go offline, etc?)) -------------------------
no_match_irhd <- anti_join(IRHD, WSHFC_cleaned, by = "property_id")
no_match_irhd <- no_match_irhd %>% drop_na(property_id)
write.csv(no_match_irhd, review_after_join_wshfc, row.names=FALSE)
## 5) Identify changes - IRHD and WSHFC_cleaned. Create long-form for easy comparison -------------------------
rectify <- identify_changes_irhd(IRHD, WSHFC_cleaned, 'property_id')
## 6) Identify which rows will be updated with new WSHFC data, or keep existing data -------------------------
# Subset 1) select records with no data in the IRHD - we will take new data from WSHFC
subset1 <- rectify %>% subset((is.na(variable_value.x)| variable_value.x == ""), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset1$select <- subset1$variable_value.y
rectify <- anti_join(rectify, subset1, by=c("ID"="ID")) # remove from rectify
updates <- subset1
rm(subset1)
# Subset 2) Below fields - select WHSFC data
subset2 <- rectify %>% subset((variable_class == "in_service_date" |
variable_class == "manager"| variable_class == "property_owner"|
variable_class == "project_id"| variable_class == "disabled"|
variable_class == "homeless"| variable_class == "senior"|
variable_class == "bed_count"| variable_class == "property_name"|
variable_class == "site_type"| variable_class == "funding_sources"|
variable_class == "HOMEcity"| variable_class == "HOMEcounty"| variable_class == "HOMEstate"|
variable_class == "expiration_date"| variable_class == "large_household"|
variable_class == "project_name"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset2$select <- subset2$variable_value.y
rectify <- anti_join(rectify, subset2, by=c("ID"="ID")) # remove from rectify
updates <- rbind(updates, subset2)
rm(subset2)
# Subset 3) select addresses that have "multiple" in the field - use IRHD address
subset3 <- rectify %>% subset(str_detect(rectify$variable_value.y, str_c("Mu")), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset3$select <- subset3$variable_value.x
rectify <- anti_join(rectify, subset3, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset3)
rm(subset3)
# Subset 4) select all AMI/Unit count/Bedroom size data, identify small numeric changes
subset4 <- rectify %>% subset((variable_class == "total_units" | variable_class == "total_restricted_units"|
variable_class == "ami_20"| variable_class == "ami_25"|
variable_class == "ami_30"| variable_class == "ami_35"|
variable_class == "ami_40"| variable_class == "ami_45"|
variable_class == "ami_50"|
variable_class == "ami_60"| variable_class == "ami_65"|
variable_class == "ami_70"| variable_class == "ami_75"|
variable_class == "ami_80"| variable_class == "ami_85"|
variable_class == "ami_90"| variable_class == "ami_100"|
variable_class == "market_rate"| variable_class == "manager_unit"|
variable_class == "bedroom_0"| variable_class == "bedroom_1"| variable_class == "bedroom_2"| variable_class == "bedroom_3"|
variable_class == "bedroom_4"| variable_class == "bedroom_5"| variable_class == "bedroom_unknown"|
variable_class == "bed_count"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
# Create formula for calculating difference between numeric values
subset4_sum <- subset4 %>% group_by(property_id) %>%
summarize(sum.x=sum(as.numeric(variable_value.x)),
sum.y=sum(as.numeric(variable_value.y)))
# abs function - absolute value of the percentage difference
subset4_sum$diff <- abs((subset4_sum$sum.x-subset4_sum$sum.y)/subset4_sum$sum.x)
# join back to subset4 table, so each row of data now has the percentage difference
subset4 <- merge(subset4, subset4_sum, by = "property_id")
rm(subset4_sum)
# Rows with "diff" of 12% or less will be selected - we want the WSHFC data
subset4$select <- ifelse(subset4$diff <= "0.12", subset4$variable_value.y, "")
# Rows where the sum.y is 0, we keep the sum.x data (if WSHFC data is 0, we keep IRHD data)
subset4$select <- ifelse(subset4$sum.y == "0", subset4$variable_value.x, subset4$select)
# Remove "diff" of greater than 12% from subset4
subset4 <- subset4 %>% subset(!(select == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select, sum.x, sum.y, diff))
rectify <- anti_join(rectify, subset4, by=c("ID"="ID")) # remove from rectify
subset4 <- subset4[, -c(8,9,10)]
updates <- rbind(updates, subset4)
rm(subset4)
# Subset 5) If WSHFC field is blank, select IRHD data
subset5 <- rectify %>% subset((is.na(variable_value.y)| variable_value.y == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset5$select <- subset5$variable_value.x
rectify <- anti_join(rectify, subset5, by=c("ID"="ID")) # remove from rectify
updates <- rbind(updates, subset5)
rm(subset5)
# Subset 6-10) Various manual selections
subset6 <- rectify %>% subset(str_detect(rectify$variable_value.y, str_c("303 Howell Way & 417 3rd Ave, Edmonds, WA 98020")),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset6$select <- subset6$variable_value.x
rectify <- anti_join(rectify, subset6, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset6)
rm(subset6)
subset7 <- rectify %>% subset(str_detect(rectify$variable_value.y, " Rainier Ave, Everett, WA 98201"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset7$select <- subset7$variable_value.x
rectify <- anti_join(rectify, subset7, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset7)
rm(subset7)
subset8 <- rectify %>% subset(str_starts(rectify$variable_value.y, ("[:alpha:]")),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset8$select <- subset8$variable_value.x
rectify <- anti_join(rectify, subset8, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset8)
rm(subset8)
# Subset 9 selects the existing IRHD data over the new WSHFC data - selected since the new data appears "weird" or I confirmed the data online, etc. Somewhat arbitrary
subset9 <- rectify %>% subset(str_detect(rectify$property_id, "18015|18016|16100|16101|16402|16002|18092|16002|17394|16408|17832|16445|16964|18086|17951|18181|16269|16794|18320|16707|18422|18379|18436"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset9$select <- subset9$variable_value.x
rectify <- anti_join(rectify, subset9, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset9)
rm(subset9)
# Subset 10 selects the new WSHFC data over the existing IRHD data - selected since the new data appears "legit". Pretty darn arbitrary
subset10 <- rectify %>% subset(str_detect(rectify$property_id, "18210|16044|16774|16725|16158|16905|17438"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset10$select <- subset10$variable_value.y
rectify <- anti_join(rectify, subset10, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset10)
rm(subset10)
# Subset 11+) As directed by housing authorities
#Everett Housing Authority
subset11 <- rectify %>% subset(str_detect(rectify$property_id, "15905|15932|15961|16024|16593|17818|17820|17821|18107|18108|18109|18110|17749|17748"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset11$select <- subset11$variable_value.x
rectify <- anti_join(rectify, subset11, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset11)
rm(subset11)
# If needed, export remaining WSHFC records and contact the corresponding housing authority
# rectify_export <- rectify %>%
#   inner_join(IRHD, by='property_id')
#
# rectify_export = rectify_export[,c("ID","property_id","variable_class","variable_value.x","variable_value.y","data_source","project_name","property_owner","in_service_date", "county","cleaned_address")]
#write.csv(rectify_export, review_after_join_housingauthorities, row.names=FALSE)
#All remaining changes (select newer WSHFC data - assuming it is correct)
subset14 <- rectify %>% subset((rectify$select == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset14$select <- subset14$variable_value.y
rectify <- anti_join(rectify, subset14, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset14)
rm(subset14)
## 7) Take "updates" data and update IRHD records, create IRHD_clean table -------------------------
IRHD_clean <- update_irhd(IRHD, updates, 'property_id')
library(tidyverse)
library(tidyr)
library(readxl)
library(data.table)
library(magrittr)
library(stringr)
library(dplyr)
library(odbc)
library(DBI)
library(openxlsx)
setwd("C:/Users/eclute/GitHub/irhd")
remotes::install_github("slu-openGIS/postmastr")
elmer_connection <- dbConnect(odbc::odbc(),
driver = "SQL Server",
server = "AWS-PROD-SQL\\Sockeye",
database = "Elmer",
trusted_connection = "yes")
review_after_join_housingauthorities <- "./Export4review-housingauthorities.csv" # Export for review after WSHFC-IRHD join. Help understanding why property data are changing, reach out to housing authorities or WSHFC
review_after_join_wshfc <- "./Export4review-wshfc.csv" # Export for review after WSHFC-IRHD join. Why property data are missing from new WSHFC data but included in IRHD
final_review_housingauthorities <- "./final_review_housingauthorities.xlsx" # Export final dataset for review by housing authorities
address_func <- "./address_match.R"
irhd_func <- "./irhd_cleaning_func.R"
wshfc_clean_script <- "./clean_2022_WSHFC_data.R"
kc_clean_script <- "./clean_2022_KC_data.R"
updates_received_script <- "./clean_2022_provider_data.R"
source(address_func)
source(irhd_func)
`%not_in%` <- Negate(`%in%`)
vintage_year <- 2022
last_vintage <- vintage_year - 1
sql_import <- paste('irhd.properties')
sql_export <- paste('exec irhd.merge_irhd_properties', vintage_year)
## 1) load data -------------------------
# load all IRHD records from Elmer
IRHD_raw <- dbReadTable(elmer_connection, SQL(sql_import))
# load cleaned WSHFC data
source(wshfc_clean_script)
# load cleaned data from data partners
#source(kc_clean_script)
source(updates_received_script)
## 2) Final tweaks -------------------------
IRHD_raw <- IRHD_raw %>% filter(data_year == last_vintage)
IRHD <- IRHD_raw %>% filter(!(county == "King")) # King county handled separately
IRHD %<>% select(-c(created_at,updated_at,sro,shape,irhd_property_id)) # Remove unneeded fields
## 3) Locate records in WSHFC not in IRHD (likely new records/properties) -------------------------
new_wshfc <- anti_join(WSHFC_cleaned, IRHD, by = "property_id")
## 4) Locate records in IRHD not in WSHFC_cleaned (No longer in WSHFC data. Will need to be verified (did they go offline, etc?)) -------------------------
no_match_irhd <- anti_join(IRHD, WSHFC_cleaned, by = "property_id")
no_match_irhd <- no_match_irhd %>% drop_na(property_id)
write.csv(no_match_irhd, review_after_join_wshfc, row.names=FALSE)
## 5) Identify changes - IRHD and WSHFC_cleaned. Create long-form for easy comparison -------------------------
rectify <- identify_changes_irhd(IRHD, WSHFC_cleaned, 'property_id')
## 6) Identify which rows will be updated with new WSHFC data, or keep existing data -------------------------
# Subset 1) select records with no data in the IRHD - we will take new data from WSHFC
subset1 <- rectify %>% subset((is.na(variable_value.x)| variable_value.x == ""), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset1$select <- subset1$variable_value.y
rectify <- anti_join(rectify, subset1, by=c("ID"="ID")) # remove from rectify
updates <- subset1
rm(subset1)
# Subset 2) Below fields - select WHSFC data
subset2 <- rectify %>% subset((variable_class == "in_service_date" |
variable_class == "manager"| variable_class == "property_owner"|
variable_class == "project_id"| variable_class == "disabled"|
variable_class == "homeless"| variable_class == "senior"|
variable_class == "bed_count"| variable_class == "property_name"|
variable_class == "site_type"| variable_class == "funding_sources"|
variable_class == "HOMEcity"| variable_class == "HOMEcounty"| variable_class == "HOMEstate"|
variable_class == "expiration_date"| variable_class == "large_household"|
variable_class == "project_name"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset2$select <- subset2$variable_value.y
rectify <- anti_join(rectify, subset2, by=c("ID"="ID")) # remove from rectify
updates <- rbind(updates, subset2)
rm(subset2)
# Subset 3) select addresses that have "multiple" in the field - use IRHD address
subset3 <- rectify %>% subset(str_detect(rectify$variable_value.y, str_c("Mu")), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset3$select <- subset3$variable_value.x
rectify <- anti_join(rectify, subset3, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset3)
rm(subset3)
# Subset 4) select all AMI/Unit count/Bedroom size data, identify small numeric changes
subset4 <- rectify %>% subset((variable_class == "total_units" | variable_class == "total_restricted_units"|
variable_class == "ami_20"| variable_class == "ami_25"|
variable_class == "ami_30"| variable_class == "ami_35"|
variable_class == "ami_40"| variable_class == "ami_45"|
variable_class == "ami_50"|
variable_class == "ami_60"| variable_class == "ami_65"|
variable_class == "ami_70"| variable_class == "ami_75"|
variable_class == "ami_80"| variable_class == "ami_85"|
variable_class == "ami_90"| variable_class == "ami_100"|
variable_class == "market_rate"| variable_class == "manager_unit"|
variable_class == "bedroom_0"| variable_class == "bedroom_1"| variable_class == "bedroom_2"| variable_class == "bedroom_3"|
variable_class == "bedroom_4"| variable_class == "bedroom_5"| variable_class == "bedroom_unknown"|
variable_class == "bed_count"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
# Create formula for calculating difference between numeric values
subset4_sum <- subset4 %>% group_by(property_id) %>%
summarize(sum.x=sum(as.numeric(variable_value.x)),
sum.y=sum(as.numeric(variable_value.y)))
# abs function - absolute value of the percentage difference
subset4_sum$diff <- abs((subset4_sum$sum.x-subset4_sum$sum.y)/subset4_sum$sum.x)
# join back to subset4 table, so each row of data now has the percentage difference
subset4 <- merge(subset4, subset4_sum, by = "property_id")
rm(subset4_sum)
# Rows with "diff" of 12% or less will be selected - we want the WSHFC data
subset4$select <- ifelse(subset4$diff <= "0.12", subset4$variable_value.y, "")
# Rows where the sum.y is 0, we keep the sum.x data (if WSHFC data is 0, we keep IRHD data)
subset4$select <- ifelse(subset4$sum.y == "0", subset4$variable_value.x, subset4$select)
# Remove "diff" of greater than 12% from subset4
subset4 <- subset4 %>% subset(!(select == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select, sum.x, sum.y, diff))
rectify <- anti_join(rectify, subset4, by=c("ID"="ID")) # remove from rectify
subset4 <- subset4[, -c(8,9,10)]
updates <- rbind(updates, subset4)
rm(subset4)
# Subset 5) If WSHFC field is blank, select IRHD data
subset5 <- rectify %>% subset((is.na(variable_value.y)| variable_value.y == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset5$select <- subset5$variable_value.x
rectify <- anti_join(rectify, subset5, by=c("ID"="ID")) # remove from rectify
updates <- rbind(updates, subset5)
rm(subset5)
# Subset 6-10) Various manual selections
subset6 <- rectify %>% subset(str_detect(rectify$variable_value.y, str_c("303 Howell Way & 417 3rd Ave, Edmonds, WA 98020")),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset6$select <- subset6$variable_value.x
rectify <- anti_join(rectify, subset6, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset6)
rm(subset6)
subset7 <- rectify %>% subset(str_detect(rectify$variable_value.y, " Rainier Ave, Everett, WA 98201"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset7$select <- subset7$variable_value.x
rectify <- anti_join(rectify, subset7, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset7)
rm(subset7)
subset8 <- rectify %>% subset(str_starts(rectify$variable_value.y, ("[:alpha:]")),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset8$select <- subset8$variable_value.x
rectify <- anti_join(rectify, subset8, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset8)
rm(subset8)
# Subset 9 selects the existing IRHD data over the new WSHFC data - selected since the new data appears "weird" or I confirmed the data online, etc. Somewhat arbitrary
subset9 <- rectify %>% subset(str_detect(rectify$property_id, "18015|18016|16100|16101|16402|16002|18092|16002|17394|16408|17832|16445|16964|18086|17951|18181|16269|16794|18320|16707|18422|18379|18436"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset9$select <- subset9$variable_value.x
rectify <- anti_join(rectify, subset9, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset9)
rm(subset9)
# Subset 10 selects the new WSHFC data over the existing IRHD data - selected since the new data appears "legit". Pretty darn arbitrary
subset10 <- rectify %>% subset(str_detect(rectify$property_id, "18210|16044|16774|16725|16158|16905|17438"), select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset10$select <- subset10$variable_value.y
rectify <- anti_join(rectify, subset10, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset10)
rm(subset10)
# Subset 11+) As directed by housing authorities
#Everett Housing Authority
subset11 <- rectify %>% subset(str_detect(rectify$property_id, "15905|15932|15961|16024|16593|17818|17820|17821|18107|18108|18109|18110|17749|17748"),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset11$select <- subset11$variable_value.x
rectify <- anti_join(rectify, subset11, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset11)
rm(subset11)
# If needed, export remaining WSHFC records and contact the corresponding housing authority
# rectify_export <- rectify %>%
#   inner_join(IRHD, by='property_id')
#
# rectify_export = rectify_export[,c("ID","property_id","variable_class","variable_value.x","variable_value.y","data_source","project_name","property_owner","in_service_date", "county","cleaned_address")]
#write.csv(rectify_export, review_after_join_housingauthorities, row.names=FALSE)
#All remaining changes (select newer WSHFC data - assuming it is correct)
subset14 <- rectify %>% subset((rectify$select == ""),
select = c(ID, property_id, variable_class,variable_value.x,variable_value.y,match, select))
subset14$select <- subset14$variable_value.y
rectify <- anti_join(rectify, subset14, by=c("ID"="ID"))# remove from rectify
updates <- rbind(updates, subset14)
rm(subset14)
## 7) Take "updates" data and update IRHD records, create IRHD_clean table -------------------------
IRHD_clean <- update_irhd(IRHD, updates, 'property_id')
source("C:/Users/eclute/GitHub/irhd/irhd_cleaning_func.R")
