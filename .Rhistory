distinct() %>%
filter(!(`Project Name` == "Annobee Apartments, The" & `Site Name` == "Annobee Apartments, The" & `80%` == 43)) %>% #remove this record, keep record with pop served & deeper affordability
filter(!(`Project Name` == "Catalina Apartments" & `Site Name` == "Catalina Apartments" & `40%` == 32)) %>% #remove this record, keep record with pop served & deeper affordability
filter(!(`Project Name` == "Maternity Shelter (Youth Emergency Shelter (YES) North)" & `Site Name` == "Youth Emergency Shelter (YES) North" & `50%` == 8)) #remove this record, keep record with deeper affordability
#check to see if any duplicates remaining - should be 0
WSHFC_cleaned %>%
distinct() %>%
group_by(`Site Name`, Address) %>%
mutate(n = n()) %>%
filter(n > 1) %>%
arrange(`Project Name`, `Site Name`, Address) %>%
view()
WSHFC_cleaned <- WSHFC_cleaned %>%
filter(`First Credit Year or C of O's` < "2021")
#rename columns and add empty columns for data we dont have
WSHFC_cleaned <- WSHFC_cleaned %>%
mutate(DataSource = as.character(NA),
AMI25 = as.numeric(NA),
AMI75 = as.numeric(NA),
AMI85 = as.numeric(NA),
AMI90 = as.numeric(NA),
AMI100 = as.numeric(NA),
MarketRate = as.numeric(NA),
ManagerUnit = as.numeric(NA),
Confidentiality = as.character(NA),
Policy = as.character(NA),
Tenure = as.character(NA)) %>%
rename(ProjectID = `ProjectKey`,
ProjectName = `Project Name`,
PropertyID = `SiteKey`,
PropertyName = `Site Name`,
Owner = `Contractor/Owner Org`,
Manager = `Property Management Org`,
City = `City`,
TotalUnits = `Total Project Units`,
TotalRestrictedUnits = `Income & Rent Restricted Units`,
InServiceDate = `First Credit Year or C of O's`,
AMI20 = `20%`,
AMI30 = `30%`,
AMI35 = `35%`,
AMI40 = `40%`,
AMI45 = `45%`,
AMI50 = `50%`,
AMI60 = `60%`,
AMI65 = `65%`,
AMI70 = `70%`,
AMI80 = `80%`,
Bedroom_0 = `STUDIO`,
Bedroom_1 = `1 BR`,
Bedroom_2 = `2 BR`,
Bedroom_3 = `3 BR`,
Bedroom_4 = `4 BR`,
Bedroom_5 = `5 BR`,
Bedroom_Unknown = `Unknown`,
BedCount = `GROUP HOME/BED`,
HOMEcity = `HOME City`,
HOMEcounty = `HOME County`,
HOMEstate = `HOME State`,
FundingSources = `Funder`,
ExpirationDate = `Project Expiration Date`,
LargeHousehold4plus = `Large Household (4+ pp)`,
Site_Type = `Site Type`,
Senior = `Elderly`,
Disabled = `Persons with Disabilities`,
ZIP = `Zip`)
#rename columns and add empty columns for data we dont have
WSHFC_cleaned <- WSHFC_cleaned %>%
mutate(DataSource = as.character(NA),
AMI25 = as.numeric(NA),
AMI75 = as.numeric(NA),
AMI85 = as.numeric(NA),
AMI90 = as.numeric(NA),
AMI100 = as.numeric(NA),
MarketRate = as.numeric(NA),
ManagerUnit = as.numeric(NA),
Confidentiality = as.character(NA),
Policy = as.character(NA),
Tenure = as.character(NA)) %>%
rename(ProjectID = `ProjectKey`,
ProjectName = `Project Name`,
PropertyID = `SiteKey`,
PropertyName = `Site Name`,
Owner = `Contractor/Owner Org`,
Manager = `Property Management Org`,
City = `City`,
TotalUnits = `Total Project Units`,
TotalRestrictedUnits = `Income & Rent Restricted Units`,
InServiceDate = `First Credit Year or C of O's`,
AMI20 = `20%`,
AMI30 = `30%`,
AMI35 = `35%`,
AMI40 = `40%`,
AMI45 = `45%`,
AMI50 = `50%`,
AMI60 = `60%`,
AMI65 = `65%`,
AMI70 = `70%`,
AMI80 = `80%`,
Bedroom_0 = `STUDIO`,
Bedroom_1 = `1 BR`,
Bedroom_2 = `2 BR`,
Bedroom_3 = `3 BR`,
Bedroom_4 = `4 BR`,
Bedroom_5 = `5 BR`,
Bedroom_Unknown = `Unknown`,
BedCount = `GROUP HOME/BED`,
HOMEcity = `HOME City`,
HOMEcounty = `HOME County`,
HOMEstate = `HOME State`,
FundingSources = `Funder`,
ExpirationDate = `Project Expiration Date`,
LargeHousehold4plus = `Large Household (4+ pp)`,
Site_Type = `Site Type`,
Senior = `Elderly`,
Disabled = `Persons with Disabilities`,
ZIP = `Zip`)
View(WSHFC_cleaned)
WSHFC_cleaned <- rename(WSHFC_cleaned, `20%`, `0.2`)
WSHFC_cleaned <- rename(WSHFC_cleaned, `20%` = `0.2`)
#rename columns and add empty columns for data we dont have
WSHFC_cleaned <- WSHFC_cleaned %>%
mutate(DataSource = as.character(NA),
AMI25 = as.numeric(NA),
AMI75 = as.numeric(NA),
AMI85 = as.numeric(NA),
AMI90 = as.numeric(NA),
AMI100 = as.numeric(NA),
MarketRate = as.numeric(NA),
ManagerUnit = as.numeric(NA),
Confidentiality = as.character(NA),
Policy = as.character(NA),
Tenure = as.character(NA)) %>%
rename(ProjectID = `ProjectKey`,
ProjectName = `Project Name`,
PropertyID = `SiteKey`,
PropertyName = `Site Name`,
Owner = `Contractor/Owner Org`,
Manager = `Property Management Org`,
City = `City`,
TotalUnits = `Total Project Units`,
TotalRestrictedUnits = `Income & Rent Restricted Units`,
InServiceDate = `First Credit Year or C of O's`,
AMI20 = `20%`,
AMI30 = `30%`,
AMI35 = `35%`,
AMI40 = `40%`,
AMI45 = `45%`,
AMI50 = `50%`,
AMI60 = `60%`,
AMI65 = `65%`,
AMI70 = `70%`,
AMI80 = `80%`,
Bedroom_0 = `STUDIO`,
Bedroom_1 = `1 BR`,
Bedroom_2 = `2 BR`,
Bedroom_3 = `3 BR`,
Bedroom_4 = `4 BR`,
Bedroom_5 = `5 BR`,
Bedroom_Unknown = `Unknown`,
BedCount = `GROUP HOME/BED`,
HOMEcity = `HOME City`,
HOMEcounty = `HOME County`,
HOMEstate = `HOME State`,
FundingSources = `Funder`,
ExpirationDate = `Project Expiration Date`,
LargeHousehold4plus = `Large Household (4+ pp)`,
Site_Type = `Site Type`,
Senior = `Elderly`,
Disabled = `Persons with Disabilities`,
ZIP = `Zip`)
View(WSHFC_cleaned)
View(original_WSHFC_raw)
#rename columns and add empty columns for data we dont have
WSHFC_cleaned <- WSHFC_cleaned %>%
mutate(DataSource = as.character(NA),
AMI25 = as.numeric(NA),
AMI75 = as.numeric(NA),
AMI85 = as.numeric(NA),
AMI90 = as.numeric(NA),
AMI100 = as.numeric(NA),
MarketRate = as.numeric(NA),
ManagerUnit = as.numeric(NA),
Confidentiality = as.character(NA),
Policy = as.character(NA),
Tenure = as.character(NA)) %>%
rename(ProjectID = `ProjectKey`,
ProjectName = `Project Name`,
PropertyID = `SiteKey`,
PropertyName = `Site Name`,
Owner = `Contractor/Owner Org`,
Manager = `Property Management Org`,
City = `City`,
TotalUnits = `Total Project Units`,
TotalRestrictedUnits = `Income & Rent Restricted Units`,
InServiceDate = `First Credit Year or C of O's`,
AMI20 = `20%`,
AMI30 = `30%`,
AMI35 = `35%`,
AMI40 = `40%`,
AMI45 = `45%`,
AMI50 = `50%`,
AMI60 = `60%`,
AMI65 = `65%`,
AMI70 = `70%`,
AMI80 = `80%`,
Bedroom_0 = `STUDIO`,
Bedroom_1 = `1 BR`,
Bedroom_2 = `2 BR`,
Bedroom_3 = `3 BR`,
Bedroom_4 = `4 BR`,
Bedroom_5 = `5 BR`,
Bedroom_Unknown = `Unknown`,
BedCount = `GROUP HOME/BED`,
`Number of HOME Units` = `HOME`,
FundingSources = `Funder`,
ExpirationDate = `Project Expiration Date`,
LargeHousehold4plus = `Large Household (4+ pp)`,
Site_Type = `Site Type`,
Senior = `Elderly`,
Disabled = `Persons with Disabilities`,
ZIP = `Zip`)
#rename columns and add empty columns for data we dont have
WSHFC_cleaned <- WSHFC_cleaned %>%
mutate(DataSource = as.character(NA),
AMI25 = as.numeric(NA),
AMI75 = as.numeric(NA),
AMI85 = as.numeric(NA),
AMI90 = as.numeric(NA),
AMI100 = as.numeric(NA),
MarketRate = as.numeric(NA),
ManagerUnit = as.numeric(NA),
Confidentiality = as.character(NA),
Policy = as.character(NA),
Tenure = as.character(NA)) %>%
rename(ProjectID = `ProjectKey`,
ProjectName = `Project Name`,
PropertyID = `SiteKey`,
PropertyName = `Site Name`,
Owner = `Contractor/Owner Org`,
Manager = `Property Management Org`,
City = `City`,
TotalUnits = `Total Project Units`,
TotalRestrictedUnits = `Income & Rent Restricted Units`,
InServiceDate = `First Credit Year or C of O's`,
AMI20 = `20%`,
AMI30 = `30%`,
AMI35 = `35%`,
AMI40 = `40%`,
AMI45 = `45%`,
AMI50 = `50%`,
AMI60 = `60%`,
AMI65 = `65%`,
AMI70 = `70%`,
AMI80 = `80%`,
Bedroom_0 = `STUDIO`,
Bedroom_1 = `1 BR`,
Bedroom_2 = `2 BR`,
Bedroom_3 = `3 BR`,
Bedroom_4 = `4 BR`,
Bedroom_5 = `5 BR`,
Bedroom_Unknown = `Unknown`,
BedCount = `GROUP HOME/BED`,
HOME = `Number of HOME Units`,
FundingSources = `Funder`,
ExpirationDate = `Project Expiration Date`,
LargeHousehold4plus = `Large Household (4+ pp)`,
Site_Type = `Site Type`,
Senior = `Elderly`,
Disabled = `Persons with Disabilities`,
ZIP = `Zip`)
#select only necessary columns and arrange columns
WSHFC_cleaned <- select_and_arrange_columns_function(WSHFC_cleaned)
#set DataSource field
WSHFC_cleaned$DataSource = "WSHFC"
#create function to select and arrange columns needed for joining
select_and_arrange_columns_function <- function(df){
df <- df %>%
select(any_of(c("DataSource",
"ProjectID",
"ProjectName",
"PropertyID",
"PropertyName",
"Owner",
"Manager",
"InServiceDate",
"ExpirationDate",
"Address",
"City",
"ZIP",
"County",
"TotalUnits",
"TotalRestrictedUnits",
"AMI20",
"AMI25",
"AMI30",
"AMI35",
"AMI40",
"AMI45",
"AMI50",
"AMI60",
"AMI65",
"AMI70",
"AMI75",
"AMI80",
"AMI85",
"AMI90",
"AMI100",
"MarketRate",
"ManagerUnit",
"Bedroom_0",
"Bedroom_1",
"Bedroom_2",
"Bedroom_3",
"Bedroom_4",
"Bedroom_5",
"Bedroom_Unknown",
"BedCount",
"Site_Type",
"HOME",
"Confidentiality",
"ContactName",
"ProjectSponsor",
"Policy",
"Senior",
"Disabled",
"Farmworker",
"Homeless",
"Large Household (+4 pp)",
"Transitional",
"Veterans",
"FundingSources",
"Tenure")))
}
# ------- DATA FILTER #1 ------- filter by county, create/modify fields
WSHFC_cleaned <- original_WSHFC_raw %>%
filter(County == "Snohomish" | County == "Pierce" | County == "Kitsap")
#create grouped funder column
WSHFC_cleaned <- WSHFC_cleaned %>%
group_by(`Site Name`, Address) %>%
mutate(Funder = paste(sort(unique(Funder)), collapse = ","))
# ------- DATA FILTER #2 ------- select entry with the largest total restricted unit count
WSHFC_cleaned <- WSHFC_cleaned %>%
group_by(`Site Name`, Address) %>%
slice_max(`Income & Rent Restricted Units`,
n = 1,
with_ties = TRUE) %>%
distinct()
# ------- DATA FILTER #3 ------- select only entry with latest expiration date
WSHFC_cleaned <- WSHFC_cleaned %>%
group_by(`Site Name`, Address) %>%
slice_max(`Project Expiration Date`,
n = 1,
with_ties = TRUE) %>%
distinct()
# ------- DATA FILTER #4 ------- select only entry with earliest in service date
WSHFC_cleaned <- WSHFC_cleaned %>%
group_by(`Site Name`, Address) %>%
slice_min(`First Credit Year or C of O's`,
n = 1,
with_ties = TRUE) %>%
distinct()
# ------- DATA FILTER #4 ------- for entries where there are multiple properties with the same total restricted unit count but different other data, select record that seems correct
WSHFC_cleaned <- WSHFC_cleaned %>%
distinct() %>%
filter(!(`Project Name` == "Annobee Apartments, The" & `Site Name` == "Annobee Apartments, The" & `80%` == 43)) %>% #remove this record, keep record with pop served & deeper affordability
filter(!(`Project Name` == "Catalina Apartments" & `Site Name` == "Catalina Apartments" & `40%` == 32)) %>% #remove this record, keep record with pop served & deeper affordability
filter(!(`Project Name` == "Maternity Shelter (Youth Emergency Shelter (YES) North)" & `Site Name` == "Youth Emergency Shelter (YES) North" & `50%` == 8)) #remove this record, keep record with deeper affordability
WSHFC_cleaned <- WSHFC_cleaned %>%
filter(`First Credit Year or C of O's` < "2021")
WSHFC_cleaned <- rename(WSHFC_cleaned, `20%` = `0.2`)
#rename columns and add empty columns for data we dont have
WSHFC_cleaned <- WSHFC_cleaned %>%
mutate(DataSource = as.character(NA),
AMI25 = as.numeric(NA),
AMI75 = as.numeric(NA),
AMI85 = as.numeric(NA),
AMI90 = as.numeric(NA),
AMI100 = as.numeric(NA),
MarketRate = as.numeric(NA),
ManagerUnit = as.numeric(NA),
Confidentiality = as.character(NA),
Policy = as.character(NA),
Tenure = as.character(NA)) %>%
rename(ProjectID = `ProjectKey`,
ProjectName = `Project Name`,
PropertyID = `SiteKey`,
PropertyName = `Site Name`,
Owner = `Contractor/Owner Org`,
Manager = `Property Management Org`,
City = `City`,
TotalUnits = `Total Project Units`,
TotalRestrictedUnits = `Income & Rent Restricted Units`,
InServiceDate = `First Credit Year or C of O's`,
AMI20 = `20%`,
AMI30 = `30%`,
AMI35 = `35%`,
AMI40 = `40%`,
AMI45 = `45%`,
AMI50 = `50%`,
AMI60 = `60%`,
AMI65 = `65%`,
AMI70 = `70%`,
AMI80 = `80%`,
Bedroom_0 = `STUDIO`,
Bedroom_1 = `1 BR`,
Bedroom_2 = `2 BR`,
Bedroom_3 = `3 BR`,
Bedroom_4 = `4 BR`,
Bedroom_5 = `5 BR`,
Bedroom_Unknown = `Unknown`,
BedCount = `GROUP HOME/BED`,
HOME = `Number of HOME Units`,
FundingSources = `Funder`,
ExpirationDate = `Project Expiration Date`,
LargeHousehold4plus = `Large Household (4+ pp)`,
Site_Type = `Site Type`,
Senior = `Elderly`,
Disabled = `Persons with Disabilities`,
ZIP = `Zip`)
#select only necessary columns and arrange columns
WSHFC_cleaned <- select_and_arrange_columns_function(WSHFC_cleaned)
#set DataSource field
WSHFC_cleaned$DataSource = "WSHFC"
J_drive_cleaned_files_filepath <- "J:/Projects/IncomeRestrictedHsgDB/2021 vintage/WSHFC/Cleaned Data/"
#save cleaned files
write_csv(WSHFC_cleaned, paste0(J_drive_cleaned_files_filepath, "WSHFC_2020_cleaned.csv"))
library(tidyverse)
library(readxl)
wshfc20 <- read_csv("J:/Projects/IncomeRestrictedHsgDB/2021 vintage/WSHFC/Cleaned Data/WSHFC_2020_cleaned.csv")
wshfc21 <- read_csv("J:/Projects/IncomeRestrictedHsgDB/2021 vintage/WSHFC/Cleaned Data/WSHFC_2021_cleaned.csv")
library(tidyverse)
library(readxl)
## 1) load data ---------------------------------------------------------------------
#load cleaned 2021 IRHD that has portfolios as of end of 2021
IRHD_raw <- read_csv("J:/Projects/IncomeRestrictedHsgDB/2021 vintage/Data/1 Working Files/2021 IRHD v3 - ready4reconcilescript.csv")
#load cleaned WSHFC data that has portfolios as of end of 2021
WSHFC_raw <- read_csv("J:/Projects/IncomeRestrictedHsgDB/2021 vintage/WSHFC/Cleaned Data/WSHFC_2021_cleaned.csv")
#load cleaned KC data that has portfolios as of end of 2021
# KC21raw <- read_csv("J:/Projects/IncomeRestrictedHsgDB/2021 vintage/Review Files - Received/")
## 2) clean up fields in IRHD, limit to 3 counties, add/remove fields --------------------------------------------------------------------
# Create three new HOME fields
IRHD_raw <- IRHD_raw %>%
mutate(HOMEcity = as.character(NA),
HOMEcounty = as.character(NA),
HOMEstate = as.character(NA))
# reorder fields - puts new HOME fields next to the existing HOME field
IRHD_raw <- IRHD_raw[, c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
61,62,63,64,65,66,67,68,69,78,79,80,70,71,72,73,74,75,76,77)]
# Remove summary AMI fields (we can do this all via a script from now on)
IRHD_raw <- IRHD_raw[, -c(40,41,42,43,44)]
# Clean up various fields for matching with WSHFC
IRHD_raw$Manager[IRHD_raw$Manager == 'HASCO'] <- 'Snohomish County Housing Authority'
IRHD_raw$Owner[IRHD_raw$Owner == 'HASCO'] <- 'Snohomish County Housing Authority'
IRHD_raw$Manager[IRHD_raw$Manager == 'Low Income Housing Institute'] <- 'Low Income Housing Institute (LIHI)'
IRHD_raw$Owner[IRHD_raw$Owner == 'Low Income Housing Institute'] <- 'Low Income Housing Institute (LIHI)'
# Limit to just Pierce, Snohomish, and Kitsap
IRHD_raw  <- IRHD_raw %>% filter(County == "Pierce" | County == "Snohomish" | County == "Kitsap")
## 3) Locate records in WSHFC not in IRHD (likely new records/properties) --------------------------------------------------------------------
newWSHFC <- anti_join(WSHFC_raw, IRHD_raw, by = "PropertyID")
## 4) Locate records in IRHD not in WSHFC (No longer in WSHFC data, but once were?) --------------------------------------------------------------------
# Compare WSHFC 2021 to 2020, to find properties that expired. Ask WSHFC about length of funding
# spot check individual records
nomatchIRHD <- anti_join(IRHD_raw, WSHFC_raw, by = "PropertyID")
nomatchIRHD <- nomatchIRHD %>% drop_na(PropertyID)
rm(newWSHFC)
rm(WSHFC_raw)
View(nomatchIRHD)
nomatchIRHD_wshfc20_join <- left_join(nomatchIRHD,wshfc20, by = "PropertyID")
View(nomatchIRHD_wshfc20_join)
select_propid <- grep("PropertyID", names(nomatchIRHD_wshfc20_join))
select_pname <- grep("ProjectName", names(nomatchIRHD_wshfc20_join))
select_adr <- grep("Address", names(nomatchIRHD_wshfc20_join))
comparison <- nomatchIRHD_wshfc20_join %>% select(c(select_propid,select_pname,select_adr))
View(comparison)
select_unit <- grep("Total Units", names(nomatchIRHD_wshfc20_join))
comparison <- nomatchIRHD_wshfc20_join %>% select(c(select_propid,select_pname,select_unit))
lifecycle::last_lifecycle_warnings()
comparison <- nomatchIRHD_wshfc20_join %>% select(all_of(c(select_propid,select_pname,select_unit)))
select_unit <- grep("Total Units", names(nomatchIRHD_wshfc20_join))
comparison <- nomatchIRHD_wshfc20_join %>% select(all_of(c(select_propid,select_pname,select_unit)))
select_unit <- grep("TotalUnits", names(nomatchIRHD_wshfc20_join))
comparison <- nomatchIRHD_wshfc20_join %>% select(all_of(c(select_propid,select_pname,select_unit)))
nomatchIRHD_wshfc21_join <- left_join(nomatchIRHD,wshfc21, by = "PropertyID")
nomatchIRHD_wshfc21_join <- left_join(nomatchIRHD,wshfc21, by = "PropertyID")
select_propid <- grep("PropertyID", names(nomatchIRHD_wshfc21_join))
select_pname <- grep("ProjectName", names(nomatchIRHD_wshfc21_join))
select_unit <- grep("TotalUnits", names(nomatchIRHD_wshfc21_join))
comparison21 <- nomatchIRHD_wshfc21_join %>% select(all_of(c(select_propid,select_pname,select_unit)))
View(comparison21)
rm(comparison)
rm(comparison21)
rm(IRHD_raw)
rm(nomatchIRHD_wshfc20_join)
rm(nomatchIRHD_wshfc21_join)
rm(wshfc20)
rm(wshfc21)
rm(select_adr)
rm(select_propid)
rm(select_pname)
rm(select_unit
rm(select_unit)
rm(select_unit)
View(nomatchIRHD)
nomatchIRHD_export <- nomatchIRHD[c(5,6,7,8,12,14,17,20,21)]
View(nomatchIRHD_export)
library(openxlsx)
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "WSHFC_missing")
writeData(work_book, "WSHFC_missing", nomatchIRHD_export)
saveWorkbook(work_book, file = "WSHFC_missing_data.xlsx", overwrite = TRUE)
